<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on /home/yorodm</title>
    <link>https://yorodm.github.io/tags/python/</link>
    <description>Recent content in Python on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 19 Dec 2017 21:34:22 -0500</lastBuildDate>
    
	<atom:link href="https://yorodm.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Acciones automáticas en Odoo</title>
      <link>https://yorodm.github.io/blog/acciones-automaticas-odoo/</link>
      <pubDate>Tue, 19 Dec 2017 21:34:22 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/acciones-automaticas-odoo/</guid>
      <description>Acciones automáticas en Odoo. Odoo permite a los desarrolladores la posibilidad de ejecutar acciones automáticas</description>
    </item>
    
    <item>
      <title>Generadores y referencias</title>
      <link>https://yorodm.github.io/blog/generadores-referencias-python/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/generadores-referencias-python/</guid>
      <description>Generadores y referencias Las referencias en Python son un tema que a menudo se pasa por alto, incluso por los que ya no somos tan novatos. Hagamos un experimento, toma a diez desarrolladores que conozcas y pregúntales qué hay de malo en esta función.
def funcionx(*args): ctx = dict() for x in args: ctx[&amp;#39;run&amp;#39;] = x yield ctx Vale, es una pregunta con truco y la respuesta es todo o nada en dependencia de como utilices la función generadora.</description>
    </item>
    
    <item>
      <title>Pruebas funcionales con factory_boy y faker</title>
      <link>https://yorodm.github.io/blog/pruebas-funcionales-factory-boy/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/pruebas-funcionales-factory-boy/</guid>
      <description>Pruebas funcionales con factory_boy. Una de las primeras cosas que aprendí cuando comencé a hacer pruebas funcionales (allá en los lejanos tiempos de la universidad) fue la necesidad de crear juegos de datos con el mayor nivel de realidad posible. En ese entonces era práctica común entre compañeros de equipo guardar un archivo CSV con nuestra información personal (nombre, número de identidad, etc) e incluso hubo alguna que otra base de datos llena de información ficticia creada por los más minuciosos.</description>
    </item>
    
    <item>
      <title>Desarrollando microservicios con Nameko</title>
      <link>https://yorodm.github.io/blog/nameko-microservicios-python/</link>
      <pubDate>Thu, 09 Nov 2017 11:13:09 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/nameko-microservicios-python/</guid>
      <description>Desarrollando microservicios con Nameko Nameko es una biblioteca para el desarrollo de microservicios en Python. A diferencia de otros frameworks como Django, Flask y Hug que tienen como principal objetivo utilizar HTTP para la comunicación con los clientes, Nameko viene con soporte integrado para AMQP y Websockets y nos permite adicionar nuestros propios protocolos.
Manos a la obra. Para hacer servicios con Nameko necesitamos algunas cosas:
 Python 2 (creo que no hay versiones para Python 3).</description>
    </item>
    
  </channel>
</rss>