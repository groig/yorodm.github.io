<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/home/yorodm</title>
    <link>https://yorodm.github.io/</link>
    <description>Recent content on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 23 Dec 2017 10:14:28 -0500</lastBuildDate>
    
	<atom:link href="https://yorodm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comentarios vía disqus y felices fiestas</title>
      <link>https://yorodm.github.io/blog/comentarios-via-disqus/</link>
      <pubDate>Sat, 23 Dec 2017 10:14:28 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/comentarios-via-disqus/</guid>
      <description>Comentarios vía Disqus y Felices Fiestas Ya están habilitados los comentarios en el blog. Un poco complicado porque ya saben, el bloqueo y etc. Espero tener más feedback ahora.
En otra nota: ¡Felices Fiestas y un muy Feliz Año Nuevo!</description>
    </item>
    
    <item>
      <title>Generadores y referencias</title>
      <link>https://yorodm.github.io/blog/generadores-referencias-python/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/generadores-referencias-python/</guid>
      <description>Generadores y referencias Las referencias en Python son un tema que a menudo se pasa por alto, incluso por los que ya no somos tan novatos. Hagamos un experimento, toma a diez desarrolladores que conozcas y pregúntales qué hay de malo en esta función.
def funcionx(*args): ctx = dict() for x in args: ctx[&amp;#39;run&amp;#39;] = x yield ctx Vale, es una pregunta con truco y la respuesta es todo o nada en dependencia de como utilices la función generadora.</description>
    </item>
    
    <item>
      <title>Pruebas funcionales con factory_boy y faker</title>
      <link>https://yorodm.github.io/blog/pruebas-funcionales-factory-boy/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/pruebas-funcionales-factory-boy/</guid>
      <description>Pruebas funcionales con factory_boy. Una de las primeras cosas que aprendí cuando comencé a hacer pruebas funcionales (allá en los lejanos tiempos de la universidad) fue la necesidad de crear juegos de datos con el mayor nivel de realidad posible. En ese entonces era práctica común entre compañeros de equipo guardar un archivo CSV con nuestra información personal (nombre, número de identidad, etc) e incluso hubo alguna que otra base de datos llena de información ficticia creada por los más minuciosos.</description>
    </item>
    
    <item>
      <title>Microframeworks en Java</title>
      <link>https://yorodm.github.io/blog/microframeworks-en-java/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/microframeworks-en-java/</guid>
      <description>Microframeworks que deberías revisar. ¡Hola! Después de unas semanas de inactivdad continúo con el tema de los frameworks para microservicios, ahora con Java que es otro de mis lengajes favoritos. Ya que todo el mundo conoce a los jugadores fuertes como Dropwizard, Spring y Swarm voy a hablar de los llamados &amp;ldquo;microframeworks&amp;rdquo;.
Ratpack En primer lugar tenemos Ratpack, que nos brinda basicamente un servidor Web basado en Netty y un DSL para manejar rutas (muy a lo Rack+ Sinatra) y una fuerte integración con Groovy .</description>
    </item>
    
    <item>
      <title>Desarrollando microservicios con Nameko</title>
      <link>https://yorodm.github.io/blog/nameko-microservicios-python/</link>
      <pubDate>Thu, 09 Nov 2017 11:13:09 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/nameko-microservicios-python/</guid>
      <description>Desarrollando microservicios con Nameko Nameko es una biblioteca para el desarrollo de microservicios en Python. A diferencia de otros frameworks como Django, Flask y Hug que tienen como principal objetivo utilizar HTTP para la comunicación con los clientes, Nameko viene con soporte integrado para AMQP y Websockets y nos permite adicionar nuestros propios protocolos.
Manos a la obra. Para hacer servicios con Nameko necesitamos algunas cosas:
 Python 2 (creo que no hay versiones para Python 3).</description>
    </item>
    
    <item>
      <title>Parser SAX en Golang</title>
      <link>https://yorodm.github.io/blog/golang-xml-sax/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yorodm.github.io/blog/golang-xml-sax/</guid>
      <description>Parser tipo SAX para Golang El problema Tratando de migrar unas cosas del trabajo a Go me tropecé con la necesidad de procesar unos archivos XML (cada día doy más gracias por TOML y JSON) de tamaño considerable.
Una mirada por encima a encoding/xml me dejo bien claro que no existía un parser tipo xml.dom.minidom (el de la biblioteca estándar de Python) o algo como Expat. Las principales funciones (ej.</description>
    </item>
    
    <item>
      <title>Desarrollando con Emacs y Go</title>
      <link>https://yorodm.github.io/blog/desarrollo-emacs-go/</link>
      <pubDate>Thu, 26 Oct 2017 15:04:13 -0400</pubDate>
      
      <guid>https://yorodm.github.io/blog/desarrollo-emacs-go/</guid>
      <description>Desarrollando con Emacs y Go. Tengo la muy sana costumbre de utilizar Emacs para todo lo que pueda (incluso revisar el correo) así que cuando me decidí a iniciar algunos proyectos en Go me alegró mucho que no existiera un IDE &amp;ldquo;oficial&amp;rdquo; para el lenguaje y si muchas herramientas, utilidades y plugins para que cada cual se arme la casa a su manera.
Haciendo un IDE en tres pasos. Convertir Emacs en un entorno de desarrollo para Go es una tarea bastante sencilla.</description>
    </item>
    
    <item>
      <title>ZFS y el problema de la memoria</title>
      <link>https://yorodm.github.io/blog/zfs-problema-memoria/</link>
      <pubDate>Tue, 24 Oct 2017 10:55:56 -0400</pubDate>
      
      <guid>https://yorodm.github.io/blog/zfs-problema-memoria/</guid>
      <description>ZFS y el problema de la memoria ZFS lleva ya unos años en tierras de Linux y cada vez que tengo un chance lo recomiendo a alguno de mis amigos sysadmins junto con un grupito de notas que he tomado acerca de como trabajar con el filesystem, optimizar alguna que otra feature y algunos casos de estudio.
Después de notar que en la mayoría de los casos, los aconsejados regresaban al castigo de LVM me dediqué a investigar las causas del rechazo y como enmendarlas.</description>
    </item>
    
    <item>
      <title>Hugo y Emacs</title>
      <link>https://yorodm.github.io/blog/hugo-y-emacs/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:34 -0400</pubDate>
      
      <guid>https://yorodm.github.io/blog/hugo-y-emacs/</guid>
      <description>Hugo, Emacs y el nuevo blog Como comentaba en el primer post, decidí comenzar desde cero, aprovechando las bondades de Github Pages y Hugo como generador de sitios estático. En lo que a generador de sitios estáticos se refiere Hugo es bastante sencillo de operar, por lo que inicialmente pensé en hacerme unos scripts para organizar el workflow de trabajo de la siguiente manera:
 Hacer nuevo post. Previsualizar. Subir a GitHub.</description>
    </item>
    
    <item>
      <title>Nuevo blog</title>
      <link>https://yorodm.github.io/blog/creando-un-nuevo-blog-con-hugo/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yorodm.github.io/blog/creando-un-nuevo-blog-con-hugo/</guid>
      <description>¡Hola! ¡Hola! Bienvenidos a mi más reciente (esperemos que último) intento de crear (y actualizar regularmente) un blog. En esta ocasión decidí alejarme de plataformas más complejas para probar GitHub Pages, Hugo como generador de sitios estáticos, Markdown y claro está Emacs.
Como siempre hablaré de temas relacionados con el desarrollo de software, software libre, lenguajes de programación y mis experiencias (buenas o malas) interactuando con el mundo del software.</description>
    </item>
    
  </channel>
</rss>